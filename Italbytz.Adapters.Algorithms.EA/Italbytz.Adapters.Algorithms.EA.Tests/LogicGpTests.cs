using Italbytz.AI;
using Italbytz.EA.Control;
using Italbytz.EA.Fitness;
using Italbytz.EA.Graph.Common;
using Italbytz.EA.Initialization;
using Italbytz.EA.Searchspace;
using GenerationStoppingCriterion =
    Italbytz.EA.StoppingCriterion.GenerationStoppingCriterion;

namespace Italbytz.Adapters.Algorithms.EA.Tests;

[TestClass]
public class LogicGpTests
{
    private readonly float[][] _features =
    [
        [5.100000f, 3.500000f, 1.400000f, 0.200000f],
        [4.900000f, 3.000000f, 1.400000f, 0.200000f],
        [4.700000f, 3.200000f, 1.300000f, 0.200000f],
        [4.600000f, 3.100000f, 1.500000f, 0.200000f],
        [5.000000f, 3.600000f, 1.400000f, 0.200000f],
        [5.400000f, 3.900000f, 1.700000f, 0.400000f],
        [4.600000f, 3.400000f, 1.400000f, 0.300000f],
        [5.000000f, 3.400000f, 1.500000f, 0.200000f],
        [4.400000f, 2.900000f, 1.400000f, 0.200000f],
        [4.900000f, 3.100000f, 1.500000f, 0.100000f],
        [5.400000f, 3.700000f, 1.500000f, 0.200000f],
        [4.800000f, 3.400000f, 1.600000f, 0.200000f],
        [4.800000f, 3.000000f, 1.400000f, 0.100000f],
        [4.300000f, 3.000000f, 1.100000f, 0.100000f],
        [5.800000f, 4.000000f, 1.200000f, 0.200000f],
        [5.700000f, 4.400000f, 1.500000f, 0.400000f],
        [5.400000f, 3.900000f, 1.300000f, 0.400000f],
        [5.100000f, 3.500000f, 1.400000f, 0.300000f],
        [5.700000f, 3.800000f, 1.700000f, 0.300000f],
        [5.100000f, 3.800000f, 1.500000f, 0.300000f],
        [5.400000f, 3.400000f, 1.700000f, 0.200000f],
        [5.100000f, 3.700000f, 1.500000f, 0.400000f],
        [4.600000f, 3.600000f, 1.000000f, 0.200000f],
        [5.100000f, 3.300000f, 1.700000f, 0.500000f],
        [4.800000f, 3.400000f, 1.900000f, 0.200000f],
        [5.000000f, 3.000000f, 1.600000f, 0.200000f],
        [5.000000f, 3.400000f, 1.600000f, 0.400000f],
        [5.200000f, 3.500000f, 1.500000f, 0.200000f],
        [5.200000f, 3.400000f, 1.400000f, 0.200000f],
        [4.700000f, 3.200000f, 1.600000f, 0.200000f],
        [4.800000f, 3.100000f, 1.600000f, 0.200000f],
        [5.400000f, 3.400000f, 1.500000f, 0.400000f],
        [5.200000f, 4.100000f, 1.500000f, 0.100000f],
        [5.500000f, 4.200000f, 1.400000f, 0.200000f],
        [4.900000f, 3.100000f, 1.500000f, 0.100000f],
        [5.000000f, 3.200000f, 1.200000f, 0.200000f],
        [5.500000f, 3.500000f, 1.300000f, 0.200000f],
        [4.900000f, 3.100000f, 1.500000f, 0.100000f],
        [4.400000f, 3.000000f, 1.300000f, 0.200000f],
        [5.100000f, 3.400000f, 1.500000f, 0.200000f],
        [5.000000f, 3.500000f, 1.300000f, 0.300000f],
        [4.500000f, 2.300000f, 1.300000f, 0.300000f],
        [4.400000f, 3.200000f, 1.300000f, 0.200000f],
        [5.000000f, 3.500000f, 1.600000f, 0.600000f],
        [5.100000f, 3.800000f, 1.900000f, 0.400000f],
        [4.800000f, 3.000000f, 1.400000f, 0.300000f],
        [5.100000f, 3.800000f, 1.600000f, 0.200000f],
        [4.600000f, 3.200000f, 1.400000f, 0.200000f],
        [5.300000f, 3.700000f, 1.500000f, 0.200000f],
        [5.000000f, 3.300000f, 1.400000f, 0.200000f],
        [7.000000f, 3.200000f, 4.700000f, 1.400000f],
        [6.400000f, 3.200000f, 4.500000f, 1.500000f],
        [6.900000f, 3.100000f, 4.900000f, 1.500000f],
        [5.500000f, 2.300000f, 4.000000f, 1.300000f],
        [6.500000f, 2.800000f, 4.600000f, 1.500000f],
        [5.700000f, 2.800000f, 4.500000f, 1.300000f],
        [6.300000f, 3.300000f, 4.700000f, 1.600000f],
        [4.900000f, 2.400000f, 3.300000f, 1.000000f],
        [6.600000f, 2.900000f, 4.600000f, 1.300000f],
        [5.200000f, 2.700000f, 3.900000f, 1.400000f],
        [5.000000f, 2.000000f, 3.500000f, 1.000000f],
        [5.900000f, 3.000000f, 4.200000f, 1.500000f],
        [6.000000f, 2.200000f, 4.000000f, 1.000000f],
        [6.100000f, 2.900000f, 4.700000f, 1.400000f],
        [5.600000f, 2.900000f, 3.600000f, 1.300000f],
        [6.700000f, 3.100000f, 4.400000f, 1.400000f],
        [5.600000f, 3.000000f, 4.500000f, 1.500000f],
        [5.800000f, 2.700000f, 4.100000f, 1.000000f],
        [6.200000f, 2.200000f, 4.500000f, 1.500000f],
        [5.600000f, 2.500000f, 3.900000f, 1.100000f],
        [5.900000f, 3.200000f, 4.800000f, 1.800000f],
        [6.100000f, 2.800000f, 4.000000f, 1.300000f],
        [6.300000f, 2.500000f, 4.900000f, 1.500000f],
        [6.100000f, 2.800000f, 4.700000f, 1.200000f],
        [6.400000f, 2.900000f, 4.300000f, 1.300000f],
        [6.600000f, 3.000000f, 4.400000f, 1.400000f],
        [6.800000f, 2.800000f, 4.800000f, 1.400000f],
        [6.700000f, 3.000000f, 5.000000f, 1.700000f],
        [6.000000f, 2.900000f, 4.500000f, 1.500000f],
        [5.700000f, 2.600000f, 3.500000f, 1.000000f],
        [5.500000f, 2.400000f, 3.800000f, 1.100000f],
        [5.500000f, 2.400000f, 3.700000f, 1.000000f],
        [5.800000f, 2.700000f, 3.900000f, 1.200000f],
        [6.000000f, 2.700000f, 5.100000f, 1.600000f],
        [5.400000f, 3.000000f, 4.500000f, 1.500000f],
        [6.000000f, 3.400000f, 4.500000f, 1.600000f],
        [6.700000f, 3.100000f, 4.700000f, 1.500000f],
        [6.300000f, 2.300000f, 4.400000f, 1.300000f],
        [5.600000f, 3.000000f, 4.100000f, 1.300000f],
        [5.500000f, 2.500000f, 4.000000f, 1.300000f],
        [5.500000f, 2.600000f, 4.400000f, 1.200000f],
        [6.100000f, 3.000000f, 4.600000f, 1.400000f],
        [5.800000f, 2.600000f, 4.000000f, 1.200000f],
        [5.000000f, 2.300000f, 3.300000f, 1.000000f],
        [5.600000f, 2.700000f, 4.200000f, 1.300000f],
        [5.700000f, 3.000000f, 4.200000f, 1.200000f],
        [5.700000f, 2.900000f, 4.200000f, 1.300000f],
        [6.200000f, 2.900000f, 4.300000f, 1.300000f],
        [5.100000f, 2.500000f, 3.000000f, 1.100000f],
        [5.700000f, 2.800000f, 4.100000f, 1.300000f],
        [6.300000f, 3.300000f, 6.000000f, 2.500000f],
        [5.800000f, 2.700000f, 5.100000f, 1.900000f],
        [7.100000f, 3.000000f, 5.900000f, 2.100000f],
        [6.300000f, 2.900000f, 5.600000f, 1.800000f],
        [6.500000f, 3.000000f, 5.800000f, 2.200000f],
        [7.600000f, 3.000000f, 6.600000f, 2.100000f],
        [4.900000f, 2.500000f, 4.500000f, 1.700000f],
        [7.300000f, 2.900000f, 6.300000f, 1.800000f],
        [6.700000f, 2.500000f, 5.800000f, 1.800000f],
        [7.200000f, 3.600000f, 6.100000f, 2.500000f],
        [6.500000f, 3.200000f, 5.100000f, 2.000000f],
        [6.400000f, 2.700000f, 5.300000f, 1.900000f],
        [6.800000f, 3.000000f, 5.500000f, 2.100000f],
        [5.700000f, 2.500000f, 5.000000f, 2.000000f],
        [5.800000f, 2.800000f, 5.100000f, 2.400000f],
        [6.400000f, 3.200000f, 5.300000f, 2.300000f],
        [6.500000f, 3.000000f, 5.500000f, 1.800000f],
        [7.700000f, 3.800000f, 6.700000f, 2.200000f],
        [7.700000f, 2.600000f, 6.900000f, 2.300000f],
        [6.000000f, 2.200000f, 5.000000f, 1.500000f],
        [6.900000f, 3.200000f, 5.700000f, 2.300000f],
        [5.600000f, 2.800000f, 4.900000f, 2.000000f],
        [7.700000f, 2.800000f, 6.700000f, 2.000000f],
        [6.300000f, 2.700000f, 4.900000f, 1.800000f],
        [6.700000f, 3.300000f, 5.700000f, 2.100000f],
        [7.200000f, 3.200000f, 6.000000f, 1.800000f],
        [6.200000f, 2.800000f, 4.800000f, 1.800000f],
        [6.100000f, 3.000000f, 4.900000f, 1.800000f],
        [6.400000f, 2.800000f, 5.600000f, 2.100000f],
        [7.200000f, 3.000000f, 5.800000f, 1.600000f],
        [7.400000f, 2.800000f, 6.100000f, 1.900000f],
        [7.900000f, 3.800000f, 6.400000f, 2.000000f],
        [6.400000f, 2.800000f, 5.600000f, 2.200000f],
        [6.300000f, 2.800000f, 5.100000f, 1.500000f],
        [6.100000f, 2.600000f, 5.600000f, 1.400000f],
        [7.700000f, 3.000000f, 6.100000f, 2.300000f],
        [6.300000f, 3.400000f, 5.600000f, 2.400000f],
        [6.400000f, 3.100000f, 5.500000f, 1.800000f],
        [6.000000f, 3.000000f, 4.800000f, 1.800000f],
        [6.900000f, 3.100000f, 5.400000f, 2.100000f],
        [6.700000f, 3.100000f, 5.600000f, 2.400000f],
        [6.900000f, 3.100000f, 5.100000f, 2.300000f],
        [5.800000f, 2.700000f, 5.100000f, 1.900000f],
        [6.800000f, 3.200000f, 5.900000f, 2.300000f],
        [6.700000f, 3.300000f, 5.700000f, 2.500000f],
        [6.700000f, 3.000000f, 5.200000f, 2.300000f],
        [6.300000f, 2.500000f, 5.000000f, 1.900000f],
        [6.500000f, 3.000000f, 5.200000f, 2.000000f],
        [6.200000f, 3.400000f, 5.400000f, 2.300000f],
        [5.900000f, 3.000000f, 5.100000f, 1.800000f]
    ];

    private readonly string[] _labels =
    [
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3"
    ];


    [TestMethod]
    public async Task TestLogicGp()
    {
        ThreadSafeRandomNetCore.Seed = 42;
        var logicGp = new EvolutionaryAlgorithm
        {
            FitnessFunction = new LogicGpPareto(_features, _labels),
            SearchSpace = new TinyGpSearchSpace
            {
                MaxLen = 10000,
                Depth = 5,
                VariableCount = 1,
                NumberConst = 100,
                MinRandom = -5,
                MaxRandom = 5
            },
            AlgorithmGraph = new LogicGPGeccoGraph()
        };
        logicGp.Initialization = new RandomInitialization(logicGp)
        {
            Size = 10000
        };

        logicGp.StoppingCriteria =
        [
            new GenerationStoppingCriterion(logicGp)
            {
                Limit = 100000
            }
        ];
        await logicGp.Run();
    }
}