using Italbytz.AI;
using Italbytz.EA.Control;
using Italbytz.EA.Fitness;
using Italbytz.EA.Graph.Common;
using Italbytz.EA.Initialization;
using Italbytz.EA.Searchspace;
using GenerationStoppingCriterion =
    Italbytz.EA.StoppingCriterion.GenerationStoppingCriterion;

namespace Italbytz.Adapters.Algorithms.EA.Tests;

[TestClass]
public class LogicGpTests
{
    private readonly int[][] _features =
    [
        [0, 3, 0, 0],
        [0, 1, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 3, 0, 0],
        [1, 3, 1, 1],
        [0, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 1, 0, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 3, 1, 0],
        [0, 1, 0, 0],
        [0, 1, 0, 0],
        [1, 3, 0, 0],
        [1, 3, 0, 1],
        [1, 3, 0, 1],
        [0, 3, 0, 0],
        [1, 3, 1, 0],
        [0, 3, 0, 0],
        [1, 3, 1, 0],
        [0, 3, 0, 1],
        [0, 3, 0, 0],
        [0, 2, 1, 1],
        [0, 3, 1, 0],
        [0, 1, 1, 0],
        [0, 3, 1, 1],
        [1, 3, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 1, 0],
        [0, 2, 1, 0],
        [1, 3, 0, 1],
        [1, 3, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [0, 1, 0, 0],
        [0, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 0, 0, 0],
        [0, 2, 0, 0],
        [0, 3, 1, 1],
        [0, 3, 1, 1],
        [0, 1, 0, 0],
        [0, 3, 1, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [3, 2, 2, 2],
        [2, 2, 2, 2],
        [3, 2, 2, 2],
        [1, 0, 1, 1],
        [3, 0, 2, 2],
        [1, 0, 2, 1],
        [2, 2, 2, 2],
        [0, 0, 1, 1],
        [3, 1, 2, 1],
        [1, 0, 1, 2],
        [0, 0, 1, 1],
        [2, 1, 1, 2],
        [2, 0, 1, 1],
        [2, 1, 2, 2],
        [1, 1, 1, 1],
        [3, 2, 2, 2],
        [1, 1, 2, 2],
        [1, 0, 1, 1],
        [2, 0, 2, 2],
        [1, 0, 1, 1],
        [2, 2, 2, 2],
        [2, 0, 1, 1],
        [2, 0, 2, 2],
        [2, 0, 2, 1],
        [2, 1, 1, 1],
        [3, 1, 2, 2],
        [3, 0, 2, 2],
        [3, 1, 2, 2],
        [2, 1, 2, 2],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [2, 0, 2, 2],
        [1, 1, 2, 2],
        [2, 3, 2, 2],
        [3, 2, 2, 2],
        [2, 0, 2, 1],
        [1, 1, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 2, 1],
        [2, 1, 2, 2],
        [1, 0, 1, 1],
        [0, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [2, 1, 1, 1],
        [0, 0, 1, 1],
        [1, 0, 1, 1],
        [2, 2, 3, 3],
        [1, 0, 2, 3],
        [3, 1, 3, 3],
        [2, 1, 3, 2],
        [3, 1, 3, 3],
        [3, 1, 3, 3],
        [0, 0, 2, 2],
        [3, 1, 3, 2],
        [3, 0, 3, 2],
        [3, 3, 3, 3],
        [3, 2, 2, 3],
        [2, 0, 3, 3],
        [3, 1, 3, 3],
        [1, 0, 2, 3],
        [1, 0, 2, 3],
        [2, 2, 3, 3],
        [3, 1, 3, 2],
        [3, 3, 3, 3],
        [3, 0, 3, 3],
        [2, 0, 2, 2],
        [3, 2, 3, 3],
        [1, 0, 2, 3],
        [3, 0, 3, 3],
        [2, 0, 2, 2],
        [3, 2, 3, 3],
        [3, 2, 3, 2],
        [2, 0, 2, 2],
        [2, 1, 2, 2],
        [2, 0, 3, 3],
        [3, 1, 3, 2],
        [3, 0, 3, 3],
        [3, 3, 3, 3],
        [2, 0, 3, 3],
        [2, 0, 2, 2],
        [2, 0, 3, 2],
        [3, 1, 3, 3],
        [2, 3, 3, 3],
        [2, 2, 3, 2],
        [2, 1, 2, 2],
        [3, 2, 3, 3],
        [3, 2, 3, 3],
        [3, 2, 2, 3],
        [1, 0, 2, 3],
        [3, 2, 3, 3],
        [3, 2, 3, 3],
        [3, 1, 3, 3],
        [2, 0, 2, 3],
        [3, 1, 3, 3],
        [2, 3, 3, 3],
        [2, 1, 2, 2]
    ];

    private readonly int[] _labels =
    [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
    ];

    [TestMethod]
    [TestCategory("FixedSeed")]
    public async Task TestLogicGp()
    {
        ThreadSafeRandomNetCore.Seed = 42;
        var logicGp = new EvolutionaryAlgorithm
        {
            FitnessFunction = new LogicGpPareto<int>(_features, _labels),
            SearchSpace = new LogicGpSearchSpace<int>(_features, _labels)
            {
                Weighting = Weighting.Computed
            },
            AlgorithmGraph = new LogicGPGeccoGraph()
        };
        logicGp.Initialization = new RandomInitialization(logicGp.SearchSpace)
        {
            Size = 10
        };

        logicGp.StoppingCriteria =
        [
            new GenerationStoppingCriterion(logicGp)
            {
                Limit = 100
            }
        ];
        var population = await logicGp.Run();
        Console.Out.WriteLine(population);
    }
}