using Italbytz.AI;
using Italbytz.EA.Control;
using Italbytz.EA.Fitness;
using Italbytz.EA.Graph.Common;
using Italbytz.EA.Initialization;
using Italbytz.EA.Searchspace;
using GenerationStoppingCriterion =
    Italbytz.EA.StoppingCriterion.GenerationStoppingCriterion;

namespace Italbytz.Adapters.Algorithms.EA.Tests;

[TestClass]
public class LogicGpTests
{
    private readonly string[][] _features =
    [
        ["1", "4", "1", "1"],
        ["1", "2", "1", "1"],
        ["1", "3", "1", "1"],
        ["1", "3", "1", "1"],
        ["1", "4", "1", "1"],
        ["2", "4", "2", "2"],
        ["1", "4", "1", "1"],
        ["1", "4", "1", "1"],
        ["1", "2", "1", "1"],
        ["1", "3", "1", "1"],
        ["2", "4", "1", "1"],
        ["1", "4", "2", "1"],
        ["1", "2", "1", "1"],
        ["1", "2", "1", "1"],
        ["2", "4", "1", "1"],
        ["2", "4", "1", "2"],
        ["2", "4", "1", "2"],
        ["1", "4", "1", "1"],
        ["2", "4", "2", "1"],
        ["1", "4", "1", "1"],
        ["2", "4", "2", "1"],
        ["1", "4", "1", "2"],
        ["1", "4", "1", "1"],
        ["1", "3", "2", "2"],
        ["1", "4", "2", "1"],
        ["1", "2", "2", "1"],
        ["1", "4", "2", "2"],
        ["2", "4", "1", "1"],
        ["2", "4", "1", "1"],
        ["1", "3", "2", "1"],
        ["1", "3", "2", "1"],
        ["2", "4", "1", "2"],
        ["2", "4", "1", "1"],
        ["2", "4", "1", "1"],
        ["1", "3", "1", "1"],
        ["1", "3", "1", "1"],
        ["2", "4", "1", "1"],
        ["1", "3", "1", "1"],
        ["1", "2", "1", "1"],
        ["1", "4", "1", "1"],
        ["1", "4", "1", "1"],
        ["1", "1", "1", "1"],
        ["1", "3", "1", "1"],
        ["1", "4", "2", "2"],
        ["1", "4", "2", "2"],
        ["1", "2", "1", "1"],
        ["1", "4", "2", "1"],
        ["1", "3", "1", "1"],
        ["2", "4", "1", "1"],
        ["1", "3", "1", "1"],
        ["4", "3", "3", "3"],
        ["3", "3", "3", "3"],
        ["4", "3", "3", "3"],
        ["2", "1", "2", "2"],
        ["4", "1", "3", "3"],
        ["2", "1", "3", "2"],
        ["3", "3", "3", "3"],
        ["1", "1", "2", "2"],
        ["4", "2", "3", "2"],
        ["2", "1", "2", "3"],
        ["1", "1", "2", "2"],
        ["3", "2", "2", "3"],
        ["3", "1", "2", "2"],
        ["3", "2", "3", "3"],
        ["2", "2", "2", "2"],
        ["4", "3", "3", "3"],
        ["2", "2", "3", "3"],
        ["2", "1", "2", "2"],
        ["3", "1", "3", "3"],
        ["2", "1", "2", "2"],
        ["3", "3", "3", "3"],
        ["3", "1", "2", "2"],
        ["3", "1", "3", "3"],
        ["3", "1", "3", "2"],
        ["3", "2", "2", "2"],
        ["4", "2", "3", "3"],
        ["4", "1", "3", "3"],
        ["4", "2", "3", "3"],
        ["3", "2", "3", "3"],
        ["2", "1", "2", "2"],
        ["2", "1", "2", "2"],
        ["2", "1", "2", "2"],
        ["2", "1", "2", "2"],
        ["3", "1", "3", "3"],
        ["2", "2", "3", "3"],
        ["3", "4", "3", "3"],
        ["4", "3", "3", "3"],
        ["3", "1", "3", "2"],
        ["2", "2", "2", "2"],
        ["2", "1", "2", "2"],
        ["2", "1", "3", "2"],
        ["3", "2", "3", "3"],
        ["2", "1", "2", "2"],
        ["1", "1", "2", "2"],
        ["2", "1", "2", "2"],
        ["2", "2", "2", "2"],
        ["2", "2", "2", "2"],
        ["3", "2", "2", "2"],
        ["1", "1", "2", "2"],
        ["2", "1", "2", "2"],
        ["3", "3", "4", "4"],
        ["2", "1", "3", "4"],
        ["4", "2", "4", "4"],
        ["3", "2", "4", "3"],
        ["4", "2", "4", "4"],
        ["4", "2", "4", "4"],
        ["1", "1", "3", "3"],
        ["4", "2", "4", "3"],
        ["4", "1", "4", "3"],
        ["4", "4", "4", "4"],
        ["4", "3", "3", "4"],
        ["3", "1", "4", "4"],
        ["4", "2", "4", "4"],
        ["2", "1", "3", "4"],
        ["2", "1", "3", "4"],
        ["3", "3", "4", "4"],
        ["4", "2", "4", "3"],
        ["4", "4", "4", "4"],
        ["4", "1", "4", "4"],
        ["3", "1", "3", "3"],
        ["4", "3", "4", "4"],
        ["2", "1", "3", "4"],
        ["4", "1", "4", "4"],
        ["3", "1", "3", "3"],
        ["4", "3", "4", "4"],
        ["4", "3", "4", "3"],
        ["3", "1", "3", "3"],
        ["3", "2", "3", "3"],
        ["3", "1", "4", "4"],
        ["4", "2", "4", "3"],
        ["4", "1", "4", "4"],
        ["4", "4", "4", "4"],
        ["3", "1", "4", "4"],
        ["3", "1", "3", "3"],
        ["3", "1", "4", "3"],
        ["4", "2", "4", "4"],
        ["3", "4", "4", "4"],
        ["3", "3", "4", "3"],
        ["3", "2", "3", "3"],
        ["4", "3", "4", "4"],
        ["4", "3", "4", "4"],
        ["4", "3", "3", "4"],
        ["2", "1", "3", "4"],
        ["4", "3", "4", "4"],
        ["4", "3", "4", "4"],
        ["4", "2", "4", "4"],
        ["3", "1", "3", "4"],
        ["4", "2", "4", "4"],
        ["3", "4", "4", "4"],
        ["3", "2", "3", "3"]
    ];

    private readonly string[] _labels =
    [
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "2",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3"
    ];


    [TestMethod]
    public async Task TestLogicGp()
    {
        ThreadSafeRandomNetCore.Seed = 42;
        var logicGp = new EvolutionaryAlgorithm
        {
            FitnessFunction = new LogicGpPareto<string>(_features, _labels),
            SearchSpace = new LogicGpSearchSpace<string>(_features, _labels),
            AlgorithmGraph = new LogicGPGeccoGraph()
        };
        logicGp.Initialization = new RandomInitialization(logicGp)
        {
            Size = 10
        };

        logicGp.StoppingCriteria =
        [
            new GenerationStoppingCriterion(logicGp)
            {
                Limit = 100
            }
        ];
        await logicGp.Run();
    }
}