using Italbytz.AI;
using Italbytz.EA;
using Italbytz.EA.Crossover;
using Italbytz.EA.Fitness;
using Italbytz.EA.Initialization;
using Italbytz.EA.Mutation;
using Italbytz.EA.PopulationManager;
using Italbytz.EA.Searchspace;
using Italbytz.EA.Selection;
using Italbytz.EA.StoppingCriterion;

namespace Italbytz.Adapters.Algorithms.EA.Tests;

[TestClass]
public class GeneticProgramTests
{
    private readonly int[][] _features =
    [
        [0, 3, 0, 0],
        [0, 1, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 3, 0, 0],
        [1, 3, 1, 1],
        [0, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 1, 0, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 3, 1, 0],
        [0, 1, 0, 0],
        [0, 1, 0, 0],
        [1, 3, 0, 0],
        [1, 3, 0, 1],
        [1, 3, 0, 1],
        [0, 3, 0, 0],
        [1, 3, 1, 0],
        [0, 3, 0, 0],
        [1, 3, 1, 0],
        [0, 3, 0, 1],
        [0, 3, 0, 0],
        [0, 2, 1, 1],
        [0, 3, 1, 0],
        [0, 1, 1, 0],
        [0, 3, 1, 1],
        [1, 3, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 1, 0],
        [0, 2, 1, 0],
        [1, 3, 0, 1],
        [1, 3, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [0, 1, 0, 0],
        [0, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 0, 0, 0],
        [0, 2, 0, 0],
        [0, 3, 1, 1],
        [0, 3, 1, 1],
        [0, 1, 0, 0],
        [0, 3, 1, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [3, 2, 2, 2],
        [2, 2, 2, 2],
        [3, 2, 2, 2],
        [1, 0, 1, 1],
        [3, 0, 2, 2],
        [1, 0, 2, 1],
        [2, 2, 2, 2],
        [0, 0, 1, 1],
        [3, 1, 2, 1],
        [1, 0, 1, 2],
        [0, 0, 1, 1],
        [2, 1, 1, 2],
        [2, 0, 1, 1],
        [2, 1, 2, 2],
        [1, 1, 1, 1],
        [3, 2, 2, 2],
        [1, 1, 2, 2],
        [1, 0, 1, 1],
        [2, 0, 2, 2],
        [1, 0, 1, 1],
        [2, 2, 2, 2],
        [2, 0, 1, 1],
        [2, 0, 2, 2],
        [2, 0, 2, 1],
        [2, 1, 1, 1],
        [3, 1, 2, 2],
        [3, 0, 2, 2],
        [3, 1, 2, 2],
        [2, 1, 2, 2],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [2, 0, 2, 2],
        [1, 1, 2, 2],
        [2, 3, 2, 2],
        [3, 2, 2, 2],
        [2, 0, 2, 1],
        [1, 1, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 2, 1],
        [2, 1, 2, 2],
        [1, 0, 1, 1],
        [0, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [2, 1, 1, 1],
        [0, 0, 1, 1],
        [1, 0, 1, 1],
        [2, 2, 3, 3],
        [1, 0, 2, 3],
        [3, 1, 3, 3],
        [2, 1, 3, 2],
        [3, 1, 3, 3],
        [3, 1, 3, 3],
        [0, 0, 2, 2],
        [3, 1, 3, 2],
        [3, 0, 3, 2],
        [3, 3, 3, 3],
        [3, 2, 2, 3],
        [2, 0, 3, 3],
        [3, 1, 3, 3],
        [1, 0, 2, 3],
        [1, 0, 2, 3],
        [2, 2, 3, 3],
        [3, 1, 3, 2],
        [3, 3, 3, 3],
        [3, 0, 3, 3],
        [2, 0, 2, 2],
        [3, 2, 3, 3],
        [1, 0, 2, 3],
        [3, 0, 3, 3],
        [2, 0, 2, 2],
        [3, 2, 3, 3],
        [3, 2, 3, 2],
        [2, 0, 2, 2],
        [2, 1, 2, 2],
        [2, 0, 3, 3],
        [3, 1, 3, 2],
        [3, 0, 3, 3],
        [3, 3, 3, 3],
        [2, 0, 3, 3],
        [2, 0, 2, 2],
        [2, 0, 3, 2],
        [3, 1, 3, 3],
        [2, 3, 3, 3],
        [2, 2, 3, 2],
        [2, 1, 2, 2],
        [3, 2, 3, 3],
        [3, 2, 3, 3],
        [3, 2, 2, 3],
        [1, 0, 2, 3],
        [3, 2, 3, 3],
        [3, 2, 3, 3],
        [3, 1, 3, 3],
        [2, 0, 2, 3],
        [3, 1, 3, 3],
        [2, 3, 3, 3],
        [2, 1, 2, 2]
    ];

    private readonly int[] _labels =
    [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
    ];

    [TestMethod]
    public async Task TestGeneticProgram()
    {
        ThreadSafeRandomNetCore.Seed = 42;
        var gp = new GeneticProgram
        {
            FitnessFunction =
                new ConfusionAndSizeFitnessFunction<int>(_features, _labels, 3),
            SearchSpace = new LogicGpSearchSpace<int>(_features, _labels)
            {
                Weighting = Weighting.Computed
            },
            SelectionForOperator = new UniformSelection(),
            SelectionForSurvival = new ParetoFrontSelection
            {
                NoOfIndividualsToSelect = 10000
            },
            Mutations =
            [
                new DeleteLiteral(), new InsertLiteral(),
                new InsertMonomial(), new ReplaceLiteral(), new DeleteMonomial()
            ],
            Crossovers = [new StandardCrossover()],
            PopulationManager = new DefaultPopulationManager()
        };
        gp.Initialization = new RandomInitialization
        {
            Size = 10,
            SearchSpace = gp.SearchSpace
        };

        gp.StoppingCriteria =
        [
            new GenerationStoppingCriterion(gp)
            {
                Limit = 100
            }
        ];
        var population = await gp.Run();
        Console.Out.WriteLine(population);
    }
}