using Italbytz.AI;
using Italbytz.EA;
using Italbytz.EA.StoppingCriterion;

namespace Italbytz.Adapters.Algorithms.EA.Tests;

[TestClass]
public class GeneticProgramTests
{
    private readonly int[][] _features =
    [
        [0, 3, 0, 0],
        [0, 1, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 3, 0, 0],
        [1, 3, 1, 1],
        [0, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 1, 0, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 3, 1, 0],
        [0, 1, 0, 0],
        [0, 1, 0, 0],
        [1, 3, 0, 0],
        [1, 3, 0, 1],
        [1, 3, 0, 1],
        [0, 3, 0, 0],
        [1, 3, 1, 0],
        [0, 3, 0, 0],
        [1, 3, 1, 0],
        [0, 3, 0, 1],
        [0, 3, 0, 0],
        [0, 2, 1, 1],
        [0, 3, 1, 0],
        [0, 1, 1, 0],
        [0, 3, 1, 1],
        [1, 3, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 1, 0],
        [0, 2, 1, 0],
        [1, 3, 0, 1],
        [1, 3, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [0, 1, 0, 0],
        [0, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 0, 0, 0],
        [0, 2, 0, 0],
        [0, 3, 1, 1],
        [0, 3, 1, 1],
        [0, 1, 0, 0],
        [0, 3, 1, 0],
        [0, 2, 0, 0],
        [1, 3, 0, 0],
        [0, 2, 0, 0],
        [3, 2, 2, 2],
        [2, 2, 2, 2],
        [3, 2, 2, 2],
        [1, 0, 1, 1],
        [3, 0, 2, 2],
        [1, 0, 2, 1],
        [2, 2, 2, 2],
        [0, 0, 1, 1],
        [3, 1, 2, 1],
        [1, 0, 1, 2],
        [0, 0, 1, 1],
        [2, 1, 1, 2],
        [2, 0, 1, 1],
        [2, 1, 2, 2],
        [1, 1, 1, 1],
        [3, 2, 2, 2],
        [1, 1, 2, 2],
        [1, 0, 1, 1],
        [2, 0, 2, 2],
        [1, 0, 1, 1],
        [2, 2, 2, 2],
        [2, 0, 1, 1],
        [2, 0, 2, 2],
        [2, 0, 2, 1],
        [2, 1, 1, 1],
        [3, 1, 2, 2],
        [3, 0, 2, 2],
        [3, 1, 2, 2],
        [2, 1, 2, 2],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 1, 1],
        [2, 0, 2, 2],
        [1, 1, 2, 2],
        [2, 3, 2, 2],
        [3, 2, 2, 2],
        [2, 0, 2, 1],
        [1, 1, 1, 1],
        [1, 0, 1, 1],
        [1, 0, 2, 1],
        [2, 1, 2, 2],
        [1, 0, 1, 1],
        [0, 0, 1, 1],
        [1, 0, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [2, 1, 1, 1],
        [0, 0, 1, 1],
        [1, 0, 1, 1],
        [2, 2, 3, 3],
        [1, 0, 2, 3],
        [3, 1, 3, 3],
        [2, 1, 3, 2],
        [3, 1, 3, 3],
        [3, 1, 3, 3],
        [0, 0, 2, 2],
        [3, 1, 3, 2],
        [3, 0, 3, 2],
        [3, 3, 3, 3],
        [3, 2, 2, 3],
        [2, 0, 3, 3],
        [3, 1, 3, 3],
        [1, 0, 2, 3],
        [1, 0, 2, 3],
        [2, 2, 3, 3],
        [3, 1, 3, 2],
        [3, 3, 3, 3],
        [3, 0, 3, 3],
        [2, 0, 2, 2],
        [3, 2, 3, 3],
        [1, 0, 2, 3],
        [3, 0, 3, 3],
        [2, 0, 2, 2],
        [3, 2, 3, 3],
        [3, 2, 3, 2],
        [2, 0, 2, 2],
        [2, 1, 2, 2],
        [2, 0, 3, 3],
        [3, 1, 3, 2],
        [3, 0, 3, 3],
        [3, 3, 3, 3],
        [2, 0, 3, 3],
        [2, 0, 2, 2],
        [2, 0, 3, 2],
        [3, 1, 3, 3],
        [2, 3, 3, 3],
        [2, 2, 3, 2],
        [2, 1, 2, 2],
        [3, 2, 3, 3],
        [3, 2, 3, 3],
        [3, 2, 2, 3],
        [1, 0, 2, 3],
        [3, 2, 3, 3],
        [3, 2, 3, 3],
        [3, 1, 3, 3],
        [2, 0, 2, 3],
        [3, 1, 3, 3],
        [2, 3, 3, 3],
        [2, 1, 2, 2]
    ];

    private readonly int[] _labels =
    [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
    ];

    [TestMethod]
    public async Task TestGeneticProgram()
    {
        ThreadSafeRandomNetCore.Seed = 42;
        var gp = new GeneticProgram
        {
            FitnessFunction = null,
            SelectionForOperator = null,
            SelectionForSurvival = null,
            Mutations = null,
            Crossovers = null,
            Initialization = null,
            PopulationManager = null,
            SearchSpace = null,
            StoppingCriteria = new IStoppingCriterion[]
            {
            },
            TrainingData = null
        };
        /*
         * randomInitialization.Size = 2;
           generationStoppingCriterion.Limit = generations;
           selection.Size = 6;
           gp.SelectionForOperator = selection;
           gp.SelectionForSurvival = paretoFrontSelection;
           gp.PopulationManager = populationManager;
           gp.TrainingData = trainData;
           gp.Initialization = UseFullInitialization
               ? completeInitialization
               : randomInitialization;
           gp.Crossovers = [new LogicGpCrossover()];
           gp.Mutations =
           [
               new DeleteLiteral(), new InsertLiteral(),
               new InsertMonomial(), new ReplaceLiteral(), new DeleteMonomial()
           ];

           IMutation? weightMutation = WeightMutationToUse switch
           {
               WeightMutation.None => null,
               WeightMutation.Restricted => new ChangeWeightsRestricted(),
               WeightMutation.Unrestricted => new ChangeWeightsUnrestricted(),
               _ => null
           };

           if (weightMutation != null)
               ((IList)gp.Mutations).Add(weightMutation);
           fitnessFunction.LabelColumnName = data.Label;
           ((LogicGpPareto)fitnessFunction).Labels = data.Labels;
           gp.FitnessFunction = fitnessFunction;
           searchSpace.OutputColumn =
               IDataViewExtensions.GetColumnAsString(trainData, labelColumnName)
                   .ToList();
           searchSpace.UsedWeighting = UsedWeighting;
           gp.SearchSpace = searchSpace;
           gp.StoppingCriteria = [generationStoppingCriterion];
         */
    }
}